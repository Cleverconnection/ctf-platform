services:
  db:
    image: mariadb:10.11.8
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: ctfdroot
      MYSQL_DATABASE: ctfd_evento_atual
      MYSQL_USER: ctfd
      MYSQL_PASSWORD: ctfd
      TZ: America/Sao_Paulo
    volumes:
      - ./data/mysql:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks: [ctf_net]

  redis:
    image: redis:7.4.0-alpine
    restart: always
    command: ["redis-server", "--appendonly", "yes"]
    environment:
      - TZ=America/Sao_Paulo
    volumes:
      - ./data/redis:/data
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks: [ctf_net]

  registry:
    image: registry:3.0.0
    restart: always
    ports:
      - "5000:5000"
    environment:
      - REGISTRY_STORAGE_DELETE_ENABLED=true
    volumes:
      - ./data/registry:/var/lib/registry
    networks: [ctf_net]
 #
  # Chall Manager
  #
  chall-manager:
    build:
      context: .
      dockerfile: chall.Dockerfile
    #image: ctferio/chall-manager:latest  # Ou a imagem customizada, caso tenha criado uma
    restart: always
    command: ["--oci.insecure"]
    environment:
      - API_URL=http://ctfd:8080  # URL para o CTFd, caso esteja rodando na mesma rede
      - PROXMOX_API_URL=https://192.168.20.5:8006/api2/json  # API do Proxmox
      - PROXMOX_USER=danilo@pve  # Usuário para autenticação no Proxmox
      - PROXMOX_PASSWORD=Y@ra*2025  # Senha para autenticação no Proxmox
      - ORAS_INSECURE=true
      - TZ=America/Sao_Paulo
      #- PULUMI_CMD=python3 /app/pulumi-script.py
      - PULUMI_CMD=/app/exec-scenario.sh
      - PROXMOX_NODE=cecpa
    volumes:
      - ./data/chall-manager:/app/data  # Para persistir dados do Chall-Manager
      - ./challenges:/scenarios
      - ./chall_tmp:/tmp/chall-manager/chall
      - ./challenges/_runner/exec-scenario.sh:/app/exec-scenario.sh:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    #ports:
    #  - "8080:8080"
    networks: [ctf_net]
    depends_on:
      - ctfd  # Certifique-se que o CTFd esteja rodando antes
#    labels:
#      - traefik.enable=true
#      - traefik.http.routers.chall-manager.rule=Host(`chall-itau.cecyber.com`)  # Substitua pelo domínio desejado
#      - traefik.http.routers.chall-manager.entrypoints=web
#      - traefik.http.services.chall-manager.loadbalancer.server.port=8080
      # - traefik.http.routers.chall-manager.tls=true  # Se estiver usando TLS
      # Caso você utilize Let's Encrypt:
      # - traefik.http.routers.chall-manager.tls.certresolver=letsencrypt
  chall-manager-janitor:
    image: ctferio/chall-manager-janitor:v0.2.0
    restart: always
    environment:
      - URL=chall-manager:8080   # acessa internamente, não precisa expor porta
      - TICKER=1m
      - TZ=America/Sao_Paulo
    networks: [ctf_net]
    depends_on:
      - chall-manager

  #
  # Proxy seguro para o Docker (evita expor /var/run/docker.sock direto)
  #
  docker-socket-proxy:
    image: lscr.io/linuxserver/socket-proxy:latest
    restart: always
    environment:
      - TZ=America/Sao_Paulo
      - ALLOW_START=1 #optional
      - ALLOW_STOP=1 #optional
      - ALLOW_RESTARTS=1 #optional
      - AUTH=0 #optional
      - BUILD=0 #optional
      - COMMIT=0 #optional
      - CONFIGS=0 #optional
      - CONTAINERS=1 #optional
      - DISABLE_IPV6=1 #optional
      - DISTRIBUTION=1 #optional
      - EVENTS=1 #optional
      - EXEC=1 #optional
      - IMAGES=1 #optional
      - INFO=1 #optional
      - LOG_LEVEL=info #optional
      - NETWORKS=1 #optional
      - NODES=1 #optional
      - PING=1 #optional
      - PLUGINS=1 #optional
      - POST=1 #optional
      - SECRETS=0 #optional
      - SERVICES=1 #optional
      - SESSION=1 #optional
      - SWARM=0 #optional
      - SYSTEM=1 #optional
      - TASKS=1 #optional
      - VERSION=1 #optional
      - VOLUMES=1 #optional
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks: [ctf_net]

  #
  # Traefik lendo o provider Docker via docker-socket-proxy
  #
  traefik:
    image: traefik:v3.1.2
    restart: always
    command:
#      - --providers.docker=true
#      - --providers.docker.endpoint=tcp://docker-socket-proxy:2375     # via proxy
#      - --providers.docker.exposedbydefault=false
#      - --providers.docker.network=ctf_net                              # rede alvo
#      - --providers.file.directory=/etc/traefik/dynamic
#      - --providers.file.watch=true
#      - --entryPoints.web.address=:80
#      - --entryPoints.websecure.address=:443
#      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.endpoint=tcp://docker-socket-proxy:2375
      - --providers.docker.exposedbydefault=false
      - --providers.docker.network=ctf_net
      - --providers.file.directory=/etc/traefik/dynamic
      - --providers.file.watch=true
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443           # <— HABILITAR 443
     # redireciona tudo de http (80) para https (443)
      - --entryPoints.web.http.redirections.entryPoint.to=websecure
      - --entryPoints.web.http.redirections.entryPoint.scheme=https
      - --api.dashboard=true
    ports:
      - "80:80"
      - "443:443"
    environment:
      - TZ=America/Sao_Paulo
    volumes:
      # já usamos o proxy, então não montamos o docker.sock direto
      - ./data/certs:/certs
      - ./data/traefik:/etc/traefik/dynamic
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks: [ctf_net]

  #
  # CTFd
  #
  ctfd:
    #image: ghcr.io/ctfd/ctfd:3.7.7
    build:
      context: ./ctfd/
      dockerfile: Dockerfile
    restart: always
    environment:
      UPLOAD_FOLDER: /var/uploads
      DATABASE_URL: mysql+pymysql://ctfd:ctfd@db/ctfd_evento_atual
      REDIS_URL: redis://redis:6379
      REVERSE_PROXY: "true"
      RATHOLE_HOST: ""
      RATHOLE_PORT: ""
      TZ: America/Sao_Paulo
    volumes:
      - ./data/uploads:/var/uploads
      - ./data/logs:/var/log/CTFd
      - ./ctfd/plugins:/opt/CTFd/CTFd/plugins
      - ./ctfd/themes:/opt/CTFd/CTFd/themes
      - ./ctfd/doc:/opt/CTFd/CTFd/doc
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./challenges:/home/challenges
    labels:
      - traefik.enable=true
      - traefik.http.routers.ctfd.rule=Host(`ctf-itau.cecyber.com`)
      - traefik.http.routers.ctfd.entrypoints=websecure
      - traefik.http.routers.ctfd.tls=true
      - traefik.http.services.ctfd.loadbalancer.server.port=8000
      - traefik.http.middlewares.ctfd-ssl.headers.customrequestheaders.X-Forwarded-Proto=https
      - traefik.http.routers.ctfd.middlewares=ctfd-ssl
      # Middleware para preservar Authorization e forçar X-Forwarded-Proto=https
     # - traefik.http.middlewares.ctfd-headers.headers.customrequestheaders.Authorization=
     # - traefik.http.middlewares.ctfd-headers.headers.customrequestheaders.X-Forwarded-Proto=https
     # - traefik.http.routers.ctfd.middlewares=ctfd-headers
#- traefik.enable=true
#      - traefik.http.routers.ctfd.rule=Host(`ctf-itau.cecyber.com`)
#      - traefik.http.routers.ctfd.entrypoints=websecure
#      - traefik.http.routers.ctfd.tls=true
#      - traefik;http;service;ctfd;loadbalancer.server.port=8000
      # se você usar um certresolver (Let's Encrypt), adicione:
      #- traefik.http.routers.ctfd.tls.certresolver=cloudfare
#      - traefik.http.middlewares.ctfd-headers.headers.customrequestheaders.Authorization=
#      - traefik.http.routers.ctfd.middlewares=ctfd-headers
    depends_on:
      - db
      - redis
    networks: [ctf_net]

  #
  # Spawner (FastAPI)
  #
  spawner:
    build: ./spawner
    restart: always
    environment:
      DOCKER_HOST: tcp://docker-socket-proxy:2375
      DOCKER_NETWORK: ctf_net
      BASE_DOMAIN: ctf-itau.cecyber.com
      TRAEFIK_ENTRYPOINT: websecure
      FLAG_SECRET: 123456               # troque em produção
      SPAWNER_API_SECRET: 1234567890    # HMAC — obrigatório
      TZ: America/Sao_Paulo
    # sem portas expostas — acessível apenas na rede interna
    depends_on:
      - docker-socket-proxy
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
    networks: [ctf_net]

networks:
  ctf_net:
